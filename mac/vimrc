"=====Vundle================================================================

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'itchyny/vim-gitbranch'
"Plugin 'itchyny/Align'
Plugin 'junegunn/vim-easy-align'
call vundle#end()            " required
filetype plugin indent on    " required

"===========================================================================
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"set t_Co=256
set termguicolors
colorscheme civic
set cursorline
nnoremap <Leader>c :set cursorline!<CR>
nnoremap <Leader>d :set cursorcolumn!<CR>

set matchpairs+=<:> 

filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=2
" when indenting with '>', use 4 spaces width
set shiftwidth=2
" On pressing tab, insert 4 spaces
set expandtab

" Use case insensitive search except when searching with capital letter
set ignorecase
set smartcase

" Highlight searches
set hlsearch

" Line numbers
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

nnoremap <Leader>r :set relativenumber!<CR>

" Syntax highlighting
syntax on 

" Set new split to go below or to right
set splitbelow
set splitright

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Set scrolloff so cursor is never at bottom of screen
set scrolloff=5

" Remap moving split to ctrl-i/j/k/l
nnoremap <C-k> <C-W><C-J>
nnoremap <C-i> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>
nnoremap <C-j> <C-W><C-H>

" Remap moving in normal and visual to i/j/k/l and insert is now o
nnoremap o i
nnoremap i k
nnoremap j h
nnoremap k j
nnoremap <C-O> o

vnoremap i k
vnoremap j h
vnoremap k j

" Let W save
command! W :w


" Set column colour to different colour after 80
"hi ColorColumn ctermfg=244
"ctermbg=0231 cterm=NONE guifg=#252630 guibg=#fcffff gui=NONE
"let &colorcolumn=join(range(101,999),",")

" Newline at 80 characters
"set tw=80
"set fo+=t

" Set resizing to be quicker
nnoremap <A-S-I> :resize -5<CR>
nnoremap <A-S-K> :resize +5<CR>
nnoremap <A-S-J> :vertical resize -5<CR>
nnoremap <A-S-L> :vertical resize +5<CR>

" Tab complete
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
"set dictionary="/usr/dict/words"

" For configuring lightline
set laststatus=2
set noshowmode
"let g:lightline = {
"      \ 'colorscheme': 'james',
"      \ }

let g:lightline = {
      \ 'colorscheme': 'james',
      \ 'active': {
      \   'left': [ [ 'mode' ],
      \             [ 'gitbranch', 'readonly', 'absolutepath', 'modified' ] ]
      \ },
      \ 'inactive': {
      \   'left': [ [ 'gitbranch', 'readonly', 'absolutepath', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name'
      \ },
      \ }
